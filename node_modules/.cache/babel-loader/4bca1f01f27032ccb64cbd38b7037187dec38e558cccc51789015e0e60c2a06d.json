{"ast":null,"code":"var _jsxFileName = \"/home/ilghar/WebstormProjects/react_hooks_examples/src/App.js\";\nimport React from 'react';\n// import ReactDOM from 'react-dom';\n\n// import List from './List.js';\n\nimport FunctionContextComponent from './components/FunctionContextComponent';\nimport ClassContextComponent from './components/ClassContextComponent';\nimport { ThemeProvider } from \"./components/ThemeContext\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/React.createContext();\nexport default function App() {\n  //#################--useEffect--#################\n  // const [resourceType, setResourceType] = React.useState('posts');\n  //\n  // // whenever \"resourceType\" changes, the page rerenders, otherwise it does not rerender\n  // React.useEffect(() => {\n  //     fetch(`https://jsonplaceholder.typicode.com/${resourceType}`)\n  //         .then(res => res.json())\n  //         .then(json => console.log(json));\n  // }, [resourceType]);\n  //\n  // console.log(\"rendered\");\n  //\n  // return(\n  //     <div>\n  //         <button onClick={() => setResourceType('posts')}>Posts</button>\n  //         <button onClick={() => setResourceType('users')}>Users</button>\n  //         <button onClick={() => setResourceType('comments')}>Comments</button>\n  //         <h1>{resourceType}</h1>\n  //     </div>\n  // )\n\n  //#################--useMemo--#################\n  // const [number, setNumber] = React.useState(0);\n  // const [dark, setDark] = React.useState(false);\n  //\n  // // our number is the same as before so we are not going to call slowFunction()\n  // // takes up memory so don't use it everywhere\n  // const doubleNumber = React.useMemo(() => {return slowFunction(number)}, [number])\n  //\n  // // on each render, a new themeStyle is created that is not the same as the previously stored themeStyle\n  // // because it uses reference\n  // // this is why useEffect does not work here, because technically themeStyle does change\n  // // wrapping themeStyle in useMemo will prevent the execution of useEffect\n  // const themeStyle = {\n  //     backgroundColor: dark ? 'black' : 'white',\n  //     color: dark ? 'white' : 'black',\n  // }\n  // React.useEffect(() => {\n  //     console.log(\"theme changed!\")\n  // }, [themeStyle])\n  //\n  // // this gets called everytime we rerender, so websiter will be slow\n  // function slowFunction(num) {\n  //     console.log(\"Calling slowFunction\")\n  //     for( let i = 1; i <= 1000000000; i++ ) {}\n  //     return num * 2\n  // }\n  //\n  // return (\n  //     <>\n  //         <input type=\"number\" value={number} onChange={e => setNumber(parseInt(e.target.value))} />\n  //         <button onClick={() => setDark(prevDark => !prevDark)}>Change theme</button>\n  //         <div style={themeStyle}>{doubleNumber}</div>\n  //     </>\n  // )\n\n  //#################--useRef--#################\n  // const [name, setName] = React.useState('')\n  // const renderCount = React.useRef(1)\n  // const prevName = React.useRef(\"\")\n  // const inputRef = React.useRef()\n  // // this is what it looks like {current:0}\n  // // this rendering is seperate from the component rendering\n  // // persisting values across renders without causing a rerender\n  // // counts howmany times it has been rendered\n  // React.useEffect(() => {\n  //     renderCount.current = renderCount.current + 1\n  // })\n  //\n  // // useRef used to store previous value\n  // // prevents the whole component from rerendering\n  // React.useEffect(() => {\n  //     prevName.current = name\n  // }, [name])\n  //\n  // // each element has a \"ref\" value used to access dom element\n  // function func() {\n  //     console.log(inputRef.current)\n  // }\n  //\n  // return (\n  //     <>\n  //         <input ref={inputRef} value={name} onChange={e => setName(e.target.value)}/>\n  //         <div>My name is {name} and it used to be {prevName.current}</div>\n  //         <div>I rendered {renderCount.current} times</div>\n  //         <button onClick={func}>Click here</button>\n  //     </>\n  // )\n\n  //#################--useCallback--#################\n  // // List.js is for this example\n  // const [number, setNumber] = React.useState(1);\n  // const [dark, setDark] = React.useState(false);\n  //\n  // // getItems will only rerender if number changes\n  // // useCallback returns the whole function\n  // // this lets us pass parameters and use the function in other places\n  // // useMemo returns the return value only\n  // // similar to useMemo, useCallback does not create a new reference unless there is change\n  // // used for slow functions...etc\n  // const getItems = React.useCallback(() => {\n  //     return [number, number+1, number+2];\n  // }, [number])\n  //\n  // const theme = {\n  //     backgroundColor: dark ? '#333' : '#fff',\n  //     color: dark ? '#fff' : '#333'\n  // }\n  //\n  // return (\n  //     <div style={theme}>\n  //         <input\n  //             type=\"number\"\n  //             value={number}\n  //             onChange = {e => setNumber(parseInt(e.target.value))}\n  //         />\n  //         <button onClick={() => setDark(prevDark => !prevDark)}>Toggle theme</button>\n  //         <List getItems={getItems}/>\n  //     </div>\n  // )\n\n  //#################--useContext--#################\n  // useContext is basically for passing props without manually passing it down to children\n  // look at the difference in ClassContextComponent(doesn't use 'useContext')\n  // and look at FunctionContextComponent(does use 'useContext')\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      children: /*#__PURE__*/_jsxDEV(FunctionContextComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","FunctionContextComponent","ClassContextComponent","ThemeProvider","jsxDEV","_jsxDEV","Fragment","_Fragment","ThemeContext","createContext","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ilghar/WebstormProjects/react_hooks_examples/src/App.js"],"sourcesContent":["import React from 'react';\n// import ReactDOM from 'react-dom';\n\n// import List from './List.js';\n\nimport FunctionContextComponent from './components/FunctionContextComponent';\nimport ClassContextComponent from './components/ClassContextComponent';\nimport {ThemeProvider} from \"./components/ThemeContext\";\nexport const ThemeContext = React.createContext();\n\nexport default function App() {\n    //#################--useEffect--#################\n    // const [resourceType, setResourceType] = React.useState('posts');\n    //\n    // // whenever \"resourceType\" changes, the page rerenders, otherwise it does not rerender\n    // React.useEffect(() => {\n    //     fetch(`https://jsonplaceholder.typicode.com/${resourceType}`)\n    //         .then(res => res.json())\n    //         .then(json => console.log(json));\n    // }, [resourceType]);\n    //\n    // console.log(\"rendered\");\n    //\n    // return(\n    //     <div>\n    //         <button onClick={() => setResourceType('posts')}>Posts</button>\n    //         <button onClick={() => setResourceType('users')}>Users</button>\n    //         <button onClick={() => setResourceType('comments')}>Comments</button>\n    //         <h1>{resourceType}</h1>\n    //     </div>\n    // )\n\n    //#################--useMemo--#################\n    // const [number, setNumber] = React.useState(0);\n    // const [dark, setDark] = React.useState(false);\n    //\n    // // our number is the same as before so we are not going to call slowFunction()\n    // // takes up memory so don't use it everywhere\n    // const doubleNumber = React.useMemo(() => {return slowFunction(number)}, [number])\n    //\n    // // on each render, a new themeStyle is created that is not the same as the previously stored themeStyle\n    // // because it uses reference\n    // // this is why useEffect does not work here, because technically themeStyle does change\n    // // wrapping themeStyle in useMemo will prevent the execution of useEffect\n    // const themeStyle = {\n    //     backgroundColor: dark ? 'black' : 'white',\n    //     color: dark ? 'white' : 'black',\n    // }\n    // React.useEffect(() => {\n    //     console.log(\"theme changed!\")\n    // }, [themeStyle])\n    //\n    // // this gets called everytime we rerender, so websiter will be slow\n    // function slowFunction(num) {\n    //     console.log(\"Calling slowFunction\")\n    //     for( let i = 1; i <= 1000000000; i++ ) {}\n    //     return num * 2\n    // }\n    //\n    // return (\n    //     <>\n    //         <input type=\"number\" value={number} onChange={e => setNumber(parseInt(e.target.value))} />\n    //         <button onClick={() => setDark(prevDark => !prevDark)}>Change theme</button>\n    //         <div style={themeStyle}>{doubleNumber}</div>\n    //     </>\n    // )\n\n    //#################--useRef--#################\n    // const [name, setName] = React.useState('')\n    // const renderCount = React.useRef(1)\n    // const prevName = React.useRef(\"\")\n    // const inputRef = React.useRef()\n    // // this is what it looks like {current:0}\n    // // this rendering is seperate from the component rendering\n    // // persisting values across renders without causing a rerender\n    // // counts howmany times it has been rendered\n    // React.useEffect(() => {\n    //     renderCount.current = renderCount.current + 1\n    // })\n    //\n    // // useRef used to store previous value\n    // // prevents the whole component from rerendering\n    // React.useEffect(() => {\n    //     prevName.current = name\n    // }, [name])\n    //\n    // // each element has a \"ref\" value used to access dom element\n    // function func() {\n    //     console.log(inputRef.current)\n    // }\n    //\n    // return (\n    //     <>\n    //         <input ref={inputRef} value={name} onChange={e => setName(e.target.value)}/>\n    //         <div>My name is {name} and it used to be {prevName.current}</div>\n    //         <div>I rendered {renderCount.current} times</div>\n    //         <button onClick={func}>Click here</button>\n    //     </>\n    // )\n\n    //#################--useCallback--#################\n    // // List.js is for this example\n    // const [number, setNumber] = React.useState(1);\n    // const [dark, setDark] = React.useState(false);\n    //\n    // // getItems will only rerender if number changes\n    // // useCallback returns the whole function\n    // // this lets us pass parameters and use the function in other places\n    // // useMemo returns the return value only\n    // // similar to useMemo, useCallback does not create a new reference unless there is change\n    // // used for slow functions...etc\n    // const getItems = React.useCallback(() => {\n    //     return [number, number+1, number+2];\n    // }, [number])\n    //\n    // const theme = {\n    //     backgroundColor: dark ? '#333' : '#fff',\n    //     color: dark ? '#fff' : '#333'\n    // }\n    //\n    // return (\n    //     <div style={theme}>\n    //         <input\n    //             type=\"number\"\n    //             value={number}\n    //             onChange = {e => setNumber(parseInt(e.target.value))}\n    //         />\n    //         <button onClick={() => setDark(prevDark => !prevDark)}>Toggle theme</button>\n    //         <List getItems={getItems}/>\n    //     </div>\n    // )\n\n    //#################--useContext--#################\n    // useContext is basically for passing props without manually passing it down to children\n    // look at the difference in ClassContextComponent(doesn't use 'useContext')\n    // and look at FunctionContextComponent(does use 'useContext')\n\n    return (\n        <>\n            <ThemeProvider>\n            <FunctionContextComponent/>\n            </ThemeProvider>\n        </>\n    )\n}\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;;AAEA;;AAEA,OAAOC,wBAAwB,MAAM,uCAAuC;AAC5E,OAAOC,qBAAqB,MAAM,oCAAoC;AACtE,SAAQC,aAAa,QAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACxD,OAAO,MAAMC,YAAY,gBAAGR,KAAK,CAACS,aAAa,CAAC,CAAC;AAEjD,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,oBACIL,OAAA,CAAAE,SAAA;IAAAI,QAAA,eACIN,OAAA,CAACF,aAAa;MAAAQ,QAAA,eACdN,OAAA,CAACJ,wBAAwB;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ;EAAC,gBAClB,CAAC;AAEX;AAACC,EAAA,GAtIuBN,GAAG;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}